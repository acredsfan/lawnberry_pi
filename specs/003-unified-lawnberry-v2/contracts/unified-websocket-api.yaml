asyncapi: 3.0.0
info:
  title: LawnBerry Pi v2 Unified WebSocket API
  version: 2.0.0
  description: >-
    Real-time WebSocket communication for LawnBerry Pi v2 autonomous mower system.
    Supports telemetry streaming, command feedback, navigation updates, safety alerts,
    job progress, AI training status, and system configuration changes.
    Constitutional compliance: 5Hz default cadence (1-10Hz range), proper topic routing.

servers:
  production:
    host: mower.local
    protocol: ws
    description: On-device WebSocket server

channels:
  # Core telemetry stream - Dashboard primary data source
  telemetry/updates:
    description: >-
      Real-time mower telemetry stream at 5Hz default cadence (configurable 1-10Hz).
      Provides comprehensive system status for Dashboard page including autonomous
      navigation state, sensor readings, power status, and safety conditions.
    subscribe:
      message:
        $ref: '#/components/messages/TelemetryUpdate'
      bindings:
        ws:
          cadence_hz: 5.0
          burst_max_hz: 10.0
          diagnostic_floor_hz: 1.0
          heartbeat_interval_sec: 1

  # Navigation updates - Map Setup and autonomous operation
  navigation/updates:
    description: >-
      Navigation system updates including position changes, path planning updates,
      obstacle detection events, and GPS mode changes. Critical for autonomous
      operation monitoring and map-based interfaces.
    subscribe:
      message:
        $ref: '#/components/messages/NavigationUpdate'
      bindings:
        ws:
          cadence_hz: 5.0
          critical: true

  # Manual control feedback - Manual Control page
  manual/feedback:
    description: >-
      Acknowledgments and status updates for manual control commands.
      Provides immediate feedback for user actions including safety override
      notifications and command execution status.
    subscribe:
      message:
        $ref: '#/components/messages/ManualControlFeedback'
      bindings:
        ws:
          heartbeat_interval_sec: 1
          critical: true

  # Safety alerts - All pages for emergency notifications
  safety/alerts:
    description: >-
      Immediate safety alert notifications for emergency stops, hazard detection,
      tilt events, and other safety-critical conditions. Highest priority stream
      with immediate delivery requirements.
    subscribe:
      message:
        $ref: '#/components/messages/SafetyAlert'
      bindings:
        ws:
          priority: critical
          immediate_delivery: true

  # Power system updates - Dashboard and autonomous planning
  power/updates:
    description: >-
      Power system status including battery levels, charging state, solar input,
      and power consumption. Constitutional compliance with INA3221 channel
      assignments (1:Battery, 2:Unused, 3:Solar).
    subscribe:
      message:
        $ref: '#/components/messages/PowerUpdate'
      bindings:
        ws:
          cadence_hz: 2.0
          constitutional_channels: true

  # Sensor health monitoring - Dashboard and diagnostics
  sensors/health:
    description: >-
      Sensor system health updates including connectivity status, reading quality,
      calibration state, and fault detection. Covers all constitutional sensors
      with proper I2C/UART addressing validation.
    subscribe:
      message:
        $ref: '#/components/messages/SensorHealthUpdate'

  # Map zone updates - Map Setup page
  map/updates:
    description: >-
      Real-time updates for map zone changes, boundary modifications (polygon), and
      exclusion area adjustments. Includes validation results and navigation
      impact assessments for autonomous operation. The mower live position SHOULD be
      rendered using the LawnBerry map pin asset (LawnBerryPi_Pin.png). Map provider
      preference defaults to Google Maps (cost-optimized) with OpenStreetMap as fallback.
    subscribe:
      message:
        $ref: '#/components/messages/MapUpdate'

  # Mow job events - Mow Planning page
  # Map locations updates - Home / AM Sun / PM Sun
  map/locations:
    description: >-
      Updates whenever Home, AM Sun, or PM Sun locations change. Used by the
      power/navigation logic to select appropriate idle/sun-seeking positions.
    subscribe:
      message:
        $ref: '#/components/messages/MapLocationsUpdate'

  # RC status - RoboHAT firmware reported state
  rc/status:
    description: >-
      Real-time RC/USB status from the RoboHAT RP2040 firmware including
      channels, encoder ticks, and optional hall-effect sensor counts.
    subscribe:
      message:
        $ref: '#/components/messages/RCStatusUpdate'
  mow/jobs/{jobId}/events:
    description: >-
      Autonomous mowing job lifecycle events including start, progress updates,
      zone completions, pause/resume events, and job completion. Provides
      detailed progress tracking for scheduled autonomous operations.
    parameters:
      jobId:
        description: UUID of the mowing job
        schema:
          type: string
          pattern: '^[0-9a-fA-F-]{36}$'
    subscribe:
      message:
        $ref: '#/components/messages/MowJobEvent'
      bindings:
        ws:
          supports_backfill: true

  # AI training progress - AI Training page
  ai/training/progress:
    description: >-
      AI training and dataset export job progress updates. Includes model
      training status, dataset export progress, annotation completion,
      and constitutional AI acceleration hierarchy status.
    subscribe:
      message:
        $ref: '#/components/messages/AITrainingProgress'

  # System configuration changes - Settings page
  settings/updates:
    description: >-
      System configuration change notifications including hardware configuration
      updates, telemetry cadence adjustments, simulation mode changes, and
      constitutional compliance validation results.
    subscribe:
      message:
        $ref: '#/components/messages/SettingsUpdate'

  # Vision processing updates - AI Training and autonomous navigation
  vision/detections:
    description: >-
      Real-time object detection results from constitutional AI acceleration
      hierarchy (Coral USB → Hailo HAT → CPU). Includes obstacle detection
      data for navigation and training data capture events.
    subscribe:
      message:
        $ref: '#/components/messages/VisionDetection'
      bindings:
        ws:
          constitutional_acceleration: true

components:
  messages:
    TelemetryUpdate:
      payload:
        type: object
        required: [timestamp, mower_state, navigation, safety, power, sensors, ai_status]
        properties:
          timestamp:
            type: string
            format: date-time
          mower_state:
            type: string
            enum: [idle, autonomous_mowing, manual_control, returning_to_base, charging, error, maintenance]
          navigation:
            type: object
            properties:
              position:
                $ref: '#/components/schemas/GPSCoordinate'
              heading:
                type: number
              velocity:
                type: number
              gps_mode:
                type: string
                enum: [rtk_usb, uart_fallback]
              quality:
                type: number
                minimum: 0.0
                maximum: 1.0
          safety:
            type: object
            properties:
              emergency_stop:
                type: boolean
              tilt_detected:
                type: boolean
              obstacles_detected:
                type: boolean
              blade_safety_active:
                type: boolean
              active_alerts:
                type: integer
          power:
            type: object
            properties:
              battery_voltage:
                type: number
              battery_percentage:
                type: number
                minimum: 0
                maximum: 100
              battery_current:
                type: number
              solar_voltage:
                type: number
              solar_current:
                type: number
              charging_state:
                type: string
                enum: [charging, discharging, idle]
              ina3221_channels:
                type: object
                description: Constitutional channel assignments
                properties:
                  channel_1_battery:
                    type: object
                  channel_2_unused:
                    type: object
                  channel_3_solar:
                    type: object
          sensors:
            type: object
            properties:
              imu_online:
                type: boolean
              gps_online:
                type: boolean
              tof_left_online:
                type: boolean
              tof_right_online:
                type: boolean
              power_monitor_online:
                type: boolean
              environmental_online:
                type: boolean
              last_update:
                type: string
                format: date-time
          ai_status:
            type: object
            properties:
              active_accelerator:
                type: string
                enum: [coral_usb, hailo_hat, cpu_fallback]
              processing_fps:
                type: number
              objects_detected:
                type: integer
              model_loaded:
                type: boolean

    NavigationUpdate:
      payload:
        type: object
        required: [timestamp, position, heading, path_status]
        properties:
          timestamp:
            type: string
            format: date-time
          position:
            $ref: '#/components/schemas/GPSCoordinate'
          heading:
            type: number
            minimum: 0
            maximum: 359.9
          velocity:
            type: number
          path_status:
            type: string
            enum: [planning, executing, completed, blocked, error]
          waypoints:
            type: array
            items:
              $ref: '#/components/schemas/GPSCoordinate'
          obstacles:
            type: array
            items:
              type: object
              properties:
                distance:
                  type: number
                bearing:
                  type: number
                confidence:
                  type: number
          gps_mode:
            type: string
            enum: [rtk_usb, uart_fallback]
          navigation_quality:
            type: number
            minimum: 0.0
            maximum: 1.0

    ManualControlFeedback:
      payload:
        type: object
        required: [command_id, command_type, status, timestamp]
        properties:
          command_id:
            type: string
          command_type:
            type: string
            enum: [drive-forward, drive-reverse, turn-left, turn-right, blade-on, blade-off, emergency-stop, autonomous-start, autonomous-stop]
          status:
            type: string
            enum: [accepted, executing, completed, failed, rejected]
          timestamp:
            type: string
            format: date-time
          parameters:
            type: object
          error_message:
            type: string
          safety_override:
            type: boolean
          executed_by:
            type: string

    SafetyAlert:
      payload:
        type: object
        required: [alert_id, severity, alert_type, message, timestamp]
        properties:
          alert_id:
            type: string
          severity:
            type: string
            enum: [info, warning, critical, emergency]
          alert_type:
            type: string
            enum: [emergency_stop, tilt_detected, obstacle_collision, blade_fault, power_critical, sensor_failure, gps_lost, communication_lost]
          message:
            type: string
          timestamp:
            type: string
            format: date-time
          source:
            type: string
          recovery_action:
            type: string
          auto_resolved:
            type: boolean

    PowerUpdate:
      payload:
        type: object
        required: [timestamp, ina3221_channels, charging_state]
        properties:
          timestamp:
            type: string
            format: date-time
          ina3221_channels:
            type: object
            description: Constitutional channel assignments enforced
            properties:
              channel_1_battery:
                type: object
                properties:
                  voltage:
                    type: number
                  current:
                    type: number
                  power:
                    type: number
              channel_2_unused:
                type: object
                properties:
                  voltage:
                    type: number
                  current:
                    type: number
                  power:
                    type: number
              channel_3_solar:
                type: object
                properties:  
                  voltage:
                    type: number
                  current:
                    type: number
                  power:
                    type: number
          battery_percentage:
            type: number
            minimum: 0
            maximum: 100
          charging_state:
            type: string
            enum: [charging, discharging, idle]
          power_consumption:
            type: number
          estimated_runtime:
            type: number

    SensorHealthUpdate:
      payload:
        type: object
        required: [timestamp, sensor_status]
        properties:
          timestamp:
            type: string
            format: date-time
          sensor_status:
            type: object
            properties:
              bno085_imu:
                $ref: '#/components/schemas/SensorHealth'
              ina3221_power:
                $ref: '#/components/schemas/SensorHealth'
              vl53l0x_left:
                $ref: '#/components/schemas/SensorHealth'
              vl53l0x_right:
                $ref: '#/components/schemas/SensorHealth'
              bme280_env:
                $ref: '#/components/schemas/SensorHealth'
              gps_primary:
                $ref: '#/components/schemas/SensorHealth'
          overall_health:
            type: string
            enum: [healthy, degraded, critical, offline]

    MapUpdate:
      payload:
        type: object
        required: [timestamp, update_type, zone_data]
        properties:
          timestamp:
            type: string
            format: date-time
          update_type:
            type: string
            enum: [zone_created, zone_updated, zone_deleted, boundary_updated, exclusion_added, exclusion_removed]
          zone_data:
            type: object
          validation_result:
            type: string
            enum: [valid, warning, error]
          navigation_impact:
            type: string
          updated_by:
            type: string

    MapLocationsUpdate:
      payload:
        type: object
        required: [timestamp, home, am_sun, pm_sun]
        properties:
          timestamp:
            type: string
            format: date-time
          home:
            $ref: '#/components/schemas/GPSCoordinate'
          am_sun:
            $ref: '#/components/schemas/GPSCoordinate'
          pm_sun:
            $ref: '#/components/schemas/GPSCoordinate'
          updated_by:
            type: string

    RCStatusUpdate:
      payload:
        type: object
        required: [timestamp, rc_enabled, rc_mode, signal_lost, blade_enabled, channels]
        properties:
          timestamp:
            type: string
            format: date-time
          rc_enabled:
            type: boolean
          rc_mode:
            type: string
            enum: [emergency, manual, assisted, training]
          signal_lost:
            type: boolean
          blade_enabled:
            type: boolean
          channels:
            type: object
            additionalProperties:
              type: integer
          encoder_ticks:
            type: integer
          hall_left:
            type: integer
          hall_right:
            type: integer

    MowJobEvent:
      payload:
        type: object
        required: [job_id, sequence, event_type, timestamp]
        properties:
          job_id:
            type: string
          sequence:
            type: integer
          event_type:
            type: string
            enum: [queued, started, paused, resumed, zone_completed, completed, failed, canceled]
          timestamp:
            type: string
            format: date-time
          progress_percent:
            type: number
            minimum: 0
            maximum: 100
          current_zone:
            type: string
          estimated_completion:
            type: string
            format: date-time
          error_code:
            type: string
          performance_metrics:
            type: object

    AITrainingProgress:
      payload:
        type: object
        required: [job_id, job_type, status, progress_percent, timestamp]
        properties:
          job_id:
            type: string
          job_type:
            type: string
            enum: [dataset_export, model_training, annotation_review]
          status:
            type: string
            enum: [queued, running, complete, failed, canceled]
          progress_percent:
            type: number
            minimum: 0
            maximum: 100
          timestamp:
            type: string
            format: date-time
          current_step:
            type: string
          images_processed:
            type: integer
          total_images:
            type: integer
          export_formats:
            type: array
            items:
              type: string
              enum: [coco-json, yolo-txt]
          artifact_urls:
            type: object
          constitutional_acceleration:
            type: object
            properties:
              active_tier:
                type: string
                enum: [coral_usb, hailo_hat, cpu_fallback]
              isolation_verified:
                type: boolean

    SettingsUpdate:
      payload:
        type: object
        required: [timestamp, setting_type, setting_key, new_value]
        properties:
          timestamp:
            type: string
            format: date-time
          setting_type:
            type: string
            enum: [telemetry_cadence, hardware_config, safety_limits, navigation_params, ai_settings, simulation_mode]
          setting_key:
            type: string
          old_value:
            type: string
          new_value:
            type: string
          updated_by:
            type: string
          constitutional_compliance:
            type: boolean
          validation_result:
            type: string
            enum: [valid, warning, error]

    VisionDetection:
      payload:
        type: object
        required: [timestamp, frame_id, detections, accelerator_used]
        properties:
          timestamp:
            type: string
            format: date-time
          frame_id:
            type: string
          detections:
            type: array
            items:
              type: object
              properties:
                object_class:
                  type: string
                confidence:
                  type: number
                bounding_box:
                  type: object
                distance_estimate:
                  type: number
          accelerator_used:
            type: string
            enum: [coral_usb, hailo_hat, cpu_fallback]
          processing_latency_ms:
            type: number
          constitutional_isolation:
            type: boolean
          training_data_captured:
            type: boolean

  schemas:
    GPSCoordinate:
      type: object
      properties:
        latitude:
          type: number
          minimum: -90
          maximum: 90
        longitude:
          type: number
          minimum: -180
          maximum: 180
        altitude:
          type: number
        accuracy:
          type: number

    SensorHealth:
      type: object  
      properties:
        status:
          type: string
          enum: [online, offline, fault, calibrating]
        last_reading:
          type: string
          format: date-time
        quality:
          type: number
          minimum: 0.0
          maximum: 1.0
        error_count:
          type: integer
        bus_address:
          type: string