export interface Position {
  latitude: number;
  longitude: number;
}

export enum HomeLocationType {
  CHARGING_STATION = 'charging_station',
  STORAGE_LOCATION = 'storage_location',
  MAINTENANCE_AREA = 'maintenance_area',
  CUSTOM = 'custom'
}

export interface HomeLocation {
  id: string;
  name: string;
  type: HomeLocationType;
  custom_type?: string;
  position: Position;
  is_default: boolean;
  description?: string;
  created_at: string;
  updated_at: string;
}

export interface CreateHomeLocationRequest {
  name: string;
  type: HomeLocationType;
  custom_type?: string;
  position: Position;
  is_default?: boolean;
  description?: string;
}

export interface BoundaryValidationResult {
  is_within_boundary: boolean;
  requires_clipping: boolean;
}

class HomeLocationService {
  private readonly baseUrl = '/api/v1/maps';

  async getHomeLocations(): Promise<HomeLocation[]> {
    try {
      const response = await fetch(`${this.baseUrl}/home-locations`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const locations = await response.json();
      return Array.isArray(locations) ? locations : [];
    } catch (error) {
      console.error('Failed to fetch home locations:', error);
      throw new Error('Failed to load home locations');
    }
  }

  async createHomeLocation(locationData: CreateHomeLocationRequest): Promise<HomeLocation> {
    try {
      const homeLocation = {
        ...locationData,
        id: '', // Will be generated by backend
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const response = await fetch(`${this.baseUrl}/home-locations`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(homeLocation),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Failed to create home location:', error);
      throw error instanceof Error ? error : new Error('Failed to create home location');
    }
  }

  async updateHomeLocation(locationId: string, locationData: Partial<HomeLocation>): Promise<HomeLocation> {
    try {
      const updateData = {
        ...locationData,
        updated_at: new Date().toISOString()
      };

      const response = await fetch(`${this.baseUrl}/home-locations/${locationId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(updateData),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Failed to update home location:', error);
      throw error instanceof Error ? error : new Error('Failed to update home location');
    }
  }

  async deleteHomeLocation(locationId: string): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/home-locations/${locationId}`, {
        method: 'DELETE',
        credentials: 'include',
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }
    } catch (error) {
      console.error('Failed to delete home location:', error);
      throw error instanceof Error ? error : new Error('Failed to delete home location');
    }
  }

  async setDefaultHomeLocation(locationId: string): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/home-locations/${locationId}/set-default`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }
    } catch (error) {
      console.error('Failed to set default home location:', error);
      throw error instanceof Error ? error : new Error('Failed to set default home location');
    }
  }

  async validateBoundary(position: Position): Promise<BoundaryValidationResult> {
    try {
      const response = await fetch(`${this.baseUrl}/home-locations/validate-boundary`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(position),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Failed to validate boundary:', error);
      // Return a default result that allows placement for now
      return { is_within_boundary: true, requires_clipping: false };
    }
  }

  getHomeLocationTypeLabel(type: HomeLocationType, customType?: string): string {
    switch (type) {
      case HomeLocationType.CHARGING_STATION:
        return 'Charging Station';
      case HomeLocationType.STORAGE_LOCATION:
        return 'Storage Location';
      case HomeLocationType.MAINTENANCE_AREA:
        return 'Maintenance Area';
      case HomeLocationType.CUSTOM:
        return customType || 'Custom Location';
      default:
        return 'Unknown';
    }
  }

  getHomeLocationIcon(type: HomeLocationType): string {
    switch (type) {
      case HomeLocationType.CHARGING_STATION:
        return 'üîã';
      case HomeLocationType.STORAGE_LOCATION:
        return 'üè†';
      case HomeLocationType.MAINTENANCE_AREA:
        return 'üîß';
      case HomeLocationType.CUSTOM:
        return 'üìç';
      default:
        return 'üìç';
    }
  }
}

export const homeLocationService = new HomeLocationService();
export default homeLocationService;
