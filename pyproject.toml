[project]
name = "lawnberry-pi"
version = "0.1.0"
description = "LawnBerry Pi v2 Unified System"
requires-python = ">=3.11"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-q"

[tool.black]
target-version = ["py311"]
line-length = 100

[tool.ruff]
target-version = "py311"
line-length = 100
select = ["E","F","I","UP","B"]
ignore = []
[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "lawnberrypi"
description = "Autonomous lawn mowing system for Raspberry Pi"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "LawnBerryPi Team"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Home Automation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dynamic = ["version"]

[tool.setuptools_scm]
write_to = "src/_version.py"

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | robohat_files
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests", "scripts"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    "env",
    ".venv",
    ".env",
    "build",
    "dist",
    "robohat_files"
]
per-file-ignores = [
    "tests/*:S101",  # Allow assert statements in tests
    "__init__.py:F401"  # Allow unused imports in __init__.py files
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
no_strict_optional = true

[[tool.mypy.overrides]]
module = [
    "RPi.*",
    "board",
    "busio",
    "digitalio",
    "adafruit_*",
    "pycoral.*",
    "tflite_runtime.*",
    "cv2",
    "picamera2",
    "gpiozero",
    "pigpio"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "hardware: marks tests that require hardware",
    "slow: marks tests as slow running",
    "network: marks tests that require network access"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/robohat_files/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "robohat_files"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection for paramiko

[tool.vulture]
min_confidence = 80
paths = ["src"]
exclude = ["robohat_files/"]
